generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Student {
  id         String       @id @unique @default(cuid())
  clerkId    String       @unique
  fname      String
  mname      String?
  lname      String
  suffix     String?
  email      String
  password   String
  course     String
  section    String
  yearLevel  String
  profile    String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Evaluation Evaluation[]
}

model Faculty {
  id           String       @id @unique @default(cuid())
  clerkId      String       @unique
  fname        String
  mname        String?
  lname        String
  suffix       String?
  department   String?
  academicRank String
  status       String?
  email        String
  password     String
  profile      String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Evaluation   Evaluation[]
  course       String[]
  section      String[]
  yearLevel    String[]
  invitations  Invitation[] @relation("AcceptedInvitations")
}

model Supervisor {
  id          String       @id @unique @default(cuid())
  clerkId     String       @unique
  fname       String
  mname       String?
  lname       String
  suffix      String?
  department   String?
  academicRank String
  email       String
  password    String
  profile     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Evaluation  Evaluation[]
  Invitations Invitation[]
}

model Coordinator {
  id        String   @id @unique @default(cuid())
  clerkId   String   @unique
  fname     String
  mname     String?
  lname     String
  suffix    String?
  email     String
  password  String
  profile   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Evaluation {
  id            String   @id @unique @default(cuid())
  evaluatorId   String
  ratingPeriod  String
  schoolYear    String
  evaluatee     String
  academicRank  String
  evaluator     String
  demonstrate   String
  integrate     String
  available     String
  regularly     String
  accurate      String
  mastery       String
  draws         String
  practical     String
  relevance     String
  awareness     String
  teaching      String
  enhance       String
  objectives    String
  independent   String
  encourage     String
  opportunity   String
  roles         String
  experience    String
  structures    String
  instructional String
  comments      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Student    Student    @relation(fields: [evaluatorId], references: [id], map: "Evaluation_Student_FK")
  Faculty    Faculty    @relation(fields: [evaluatorId], references: [id], map: "Evaluation_Faculty_FK")
  Supervisor Supervisor @relation(fields: [evaluatorId], references: [id], map: "Evaluation_Supervisor_FK")

  @@index([evaluatorId])
}

model Invitation {
  id        String   @id @unique @default(cuid())
  name      String
  platform  String
  file      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  supervisorId String
  supervisor   Supervisor @relation(fields: [supervisorId], references: [id])

  acceptedById String?
  acceptedBy   Faculty? @relation("AcceptedInvitations", fields: [acceptedById], references: [id])

  @@index([supervisorId])
  @@index([acceptedById])
}
