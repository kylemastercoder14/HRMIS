generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Student {
  id        String   @id @unique @default(cuid())
  fname     String
  mname     String?
  lname     String
  suffix    String?
  email     String
  password  String
  course    String
  section   String
  yearLevel Int
  profile   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Answer Answer[] @relation(map: "Evaluation_Student_FK")
}

model Faculty {
  id           String       @id @unique @default(cuid())
  employeeId   String
  fname        String
  mname        String?
  lname        String
  suffix       String?
  department   String?
  academicRank String
  position     String
  status       String?
  email        String
  password     String
  profile      String?
  dateHired    String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  course       String[]
  section      String[]
  yearLevel    String[]
  invitations  Invitation[] @relation("AcceptedInvitations")

  Answer Answer[] @relation(map: "Evaluation_Faculty_FK")
}

model NonTeaching {
  id         String   @id @unique @default(cuid())
  fname      String
  mname      String?
  lname      String
  suffix     String?
  office     String
  position   String
  email      String
  status     String?
  dateHired  String
  employeeId String
  password   String
  profile    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Supervisor {
  id           String   @id @unique @default(cuid())
  employeeId   String
  fname        String
  mname        String?
  lname        String
  suffix       String?
  department   String?
  academicRank String
  position     String
  status       String?
  dateHired    String
  email        String
  password     String
  profile      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Answer Answer[] @relation(map: "Evaluation_Supervisor_FK")
}

model Coordinator {
  id        String   @id @unique @default(cuid())
  fname     String
  mname     String?
  lname     String
  suffix    String?
  email     String
  password  String
  profile   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Evaluation {
  id            String   @id @unique @default(cuid())
  title         String
  description   String
  startDateTime DateTime
  endDateTime   DateTime
  semester      String
  schoolYear    String?
  status        String   @default("Starting")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Categories Category[]
}

model Category {
  id        String     @id @unique @default(cuid())
  title     String
  criteria  Int
  questions Question[]

  evaluation   Evaluation @relation(fields: [evaluationId], references: [id])
  evaluationId String

  @@index([evaluationId])
}

model Question {
  id         String   @id @unique @default(cuid())
  text       String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  Answer     Answer[]

  @@index([categoryId])
}

model Answer {
  id           String   @id @unique @default(cuid())
  evaluatorId  String
  evaluatee    String
  evaluator    String
  academicRank String
  semester     String
  yearLevel    String?
  question     Question @relation(fields: [questionId], references: [id])
  questionId   String
  rating       Int // e.g., the rating given by the evaluator (1-5)
  comments     String? // Optional comments from the evaluator

  Student    Student    @relation(fields: [evaluatorId], references: [id], map: "Evaluation_Student_FK")
  Faculty    Faculty    @relation(fields: [evaluatorId], references: [id], map: "Evaluation_Faculty_FK")
  Supervisor Supervisor @relation(fields: [evaluatorId], references: [id], map: "Evaluation_Supervisor_FK")

  @@index([questionId])
  @@index([evaluatorId])
}

model Invitation {
  id        String   @id @unique @default(cuid())
  name      String
  platform  String
  file      String
  startDate String
  status    String   @default("Pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  faculties Faculty[] @relation("AcceptedInvitations")
}
